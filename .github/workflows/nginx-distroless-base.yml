name: Nginx - Distroless - Base

on: [push]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      # 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Set up Docker
        uses: crazy-max/ghaction-setup-docker@v2

      # - name: Build the Docker image
      #   run: docker build -t ${{ env.REGISTRY }}/subzone/nginx-distroless-base:latest ${{ github.workspace }}/nginx-base

      # - name: â˜¢ Scan Images
      #   uses: spicyparrot/scan-images@trunk
      #   id: nginx
      #   with:
      #     image_grep: "nginx"
      #     severities: "CRITICAL,HIGH"
      #     upload_reports: true   

      - name: Build and scan image
        uses: ISID/build-and-scan-image@main
        with:
          # Image name and optionally tag in "name:tag" format
          tag: ${{ env.REGISTRY }}/subzone/nginx-distroless-base:latest

          # Path to base directory to run `docker build` command (default ".")
          path: ${{ github.workspace }}/nginx-base

          # Path to Dockerfile, which is relative path from "path" parameter (default "Dockerfile")
          dockerfile: Dockerfile

          # Enable scanning Dockerfile by hadolint (default "true")
          hadolint-enable: "true"

          # Hadolint version.
          hadolint-version: "2.8.0"

          # Fail step if rules with a severity above this level are violated (default "info")
          # Acceptable value is one of (error|warning|info|style|ignore|none)
          hadolint-severity: info

          # # Enable scanning image by dockle (default "true")
          # dockle-enable: "true"

          # # Dockle version.
          # dockle-version: "0.4.3"

          # # Fail step if checkpoints with a severity above this level are violated (default "WARN")
          # # Acceptable value is one of (INFO|WARN|FATAL)
          # dockle-severity: WARN

          # Enable scanning image by trivy (default "true")
          trivy-enable: "true"

          # Trivy version.
          trivy-version: "0.23.0"

          # Fail step if image has vulnerabilities with a severity same as this level
          # (default "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL")
          # Acceptable value is comma-separated list of (UNKNOWN|LOW|MEDIUM|HIGH|CRITICAL)
          trivy-severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL

          # Vulnerability types which trivy detect to (default "os,library")
          # Acceptable value is comma-separated list of (os|library)
          trivy-vuln-type: os,library

          # Ignore unfixed vulnerabilities (default "false")
          trivy-ignore-unfixed: "false"

          # Enable scanning image by snyk (default "false")
          # If enabled, "snyk-token" must be also set.
          snyk-enable: "false"

          # Snyk CLI version.
          snyk-version: "1.848.0"

          # Snyk API Token (default "")
          # This is necessary if "snyk-enable" is "true".
          snyk-token: ""

          # Fail step if image has vulnerabilities with a severity above this level (default "low")
          # Acceptable value is one of (low|medium|high|critical)
          snyk-severity: low

          # Exclude base image vulnerabilities (default "false")
          snyk-exclude-base-image-vulns: "false"
      - name: Log in to GitHub Container Registry
        run: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image to GitHub Container Registry
        run: docker push ${{ env.REGISTRY }}/subzone/nginx-distroless-base:latest
